{"version":3,"sources":["data.csv","components/migrationProgressBar/migrationProgressBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["MigrationProgressBar","useState","csvArray","setCsvArray","submit","fetch","raw","then","r","text","console","log","str","delim","headers","slice","indexOf","split","newArray","map","row","values","reduce","obj","header","i","processCSV","className","id","onClick","e","preventDefault","length","item","name","ProgressBar","now","current","max","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAe,MAA0B,iC,OC6D1BA,MAzDf,WACI,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EAAS,WACXC,MAAMC,GACDC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAE,GACNC,QAAQC,IAAI,gBAAiBF,GApBlB,SAACG,GAAoB,IAAfC,EAAc,uDAAR,IACrBC,EAAUF,EAAIG,MAAM,EAAGH,EAAII,QAAQ,OAAOC,MAAMJ,GAGhDK,EAFON,EAAIG,MAAMH,EAAII,QAAQ,MAAM,GAAGC,MAAM,MAE5BE,KAAK,SAAAC,GACvB,IAAMC,EAASD,EAAIH,MAAMJ,GAKzB,OAJmBC,EAAQQ,QAAO,SAACC,EAAKC,EAAQC,GAE5C,OADAF,EAAIC,GAAUH,EAAOI,GACdF,IACT,OAINpB,EAAYe,GAQRQ,CAAWjB,OAInB,OACI,qBAAKkB,UAAU,UAAf,SACI,uBAAMC,GAAG,WAAT,UACI,wBACI,cAAY,aACZC,QAAS,SAACC,GACNA,EAAEC,iBACF3B,KAJR,iCAQA,uBAAM,uBACLF,EAAS8B,OAAO,EACjB,mCAEQ9B,EAASiB,KAAI,SAACc,EAAMR,GAAP,OACT,sBAAK,cAAY,eAAjB,UACI,gCAAMQ,EAAKC,KAAX,OACA,cAACC,EAAA,EAAD,CAAaC,IAAKH,EAAKI,QAASC,IAAKL,EAAKM,iBAIpD,WCxCPC,MAVf,WAEE,OACE,sBAAKb,UAAU,MAAf,UACI,wDACA,cAAC,EAAD,QCEOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ded88ae1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/data.51a55410.csv\";","import React, {useState} from 'react'\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport raw from '../../data.csv';\n\nfunction MigrationProgressBar(){\n    const [csvArray, setCsvArray] = useState([]);\n    // [{name: \"\", target: 0, current: 0},{name: \"\", target: 0, current: 0}]\n\n    const processCSV = (str, delim=',') => {\n        const headers = str.slice(0, str.indexOf('\\n')).split(delim);\n        const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n\n        const newArray = rows.map( row => {\n            const values = row.split(delim);\n            const eachObject = headers.reduce((obj, header, i) => {\n                obj[header] = values[i];\n                return obj;\n            },{})\n            return eachObject;\n        })\n\n        setCsvArray(newArray)\n    }\n\n    const submit = () => {\n        fetch(raw)\n            .then(r => r.text())\n            .then(text => {\n            console.log('text decoded:', text);\n            processCSV(text)\n        });\n    }\n\n    return (\n        <div className=\"results\">\n            <form id='csv-form'>\n                <button \n                    data-testid=\"btnResults\"\n                    onClick={(e) => {\n                        e.preventDefault()\n                        submit()\n                    }}>\n                    Show Latest Results\n                </button>\n                <br /><br />\n                {csvArray.length>0 ? \n                <>\n                    {\n                        csvArray.map((item, i) => (\n                            <div data-testid=\"progressBars\">\n                                <div>{item.name} </div>\n                                <ProgressBar now={item.current} max={item.target} />\n                            </div>\n                        ))\n                    }   \n                </> : null}\n            </form>\n        </div>\n    );\n}\n\nexport default MigrationProgressBar;","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport React from \"react\";\nimport MigrationProgressBar from './components/migrationProgressBar/migrationProgressBar'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <h1>Tracking our progress!</h1>\n        <MigrationProgressBar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}